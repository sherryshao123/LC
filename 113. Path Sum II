Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]



class Solution(object):
    def pathSum(self, root, sums):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        if not root: return []
        res = []
        
        def dfs(tmp, cur, root):
            #when return
            if not root.left and not root.right:
                if cur == sums:
                    res.append(tmp)
                return
                
            # node.left and node.right
            if root.left:
                dfs(tmp+[root.left.val], cur+ root.left.val, root.left) #tmp=[5,4], cur = 9, node.val =4
            if root.right:
                dfs(tmp+[root.right.val], cur+root.right.val, root.right)
            
        dfs([root.val], root.val, root)
        return res
