Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]



# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

from collections import deque
class Solution(object):
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if not root:
            return []
        res = []
        d = deque()
        deep = -1
        maxdeep = -1
        d.appendleft([root, 0])
        
        while d:
            cur, deep = d.pop()
            
            print(deep, maxdeep)
            if deep > maxdeep:
                res.append([cur.val])
                maxdeep = deep
            else:
                
                res[deep].append(cur.val)
            if cur.left:
                d.appendleft([cur.left, deep + 1])
                
            if cur.right:
                d.appendleft([cur.right, deep + 1])
                
        return res[::-1]
            
