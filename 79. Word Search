Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        def dfs(i, j, wd_index):
            if i < 0 or j < 0 or i >= m or j >= n or board[i][j] == "#" or board[i][j] != word[wd_index]:
                return False

            if wd_index == len(word) - 1:
                return True
            char = board[i][j]
            board[i][j] = "#"
            if dfs(i-1, j, wd_index+1):
                return True
            if dfs(i+1, j, wd_index+1):
                return True
            if dfs(i, j+1, wd_index+1):
                return True
            if dfs(i, j-1, wd_index+1):
                return True
            board[i][j] = char
            
        m = len(board)
        n = len(board[0])
        
        for i in xrange(m):
            for j in xrange(n):
                if board[i][j] == word[0]:
                    if dfs(i, j, 0):
                        return True
        return False
                        
